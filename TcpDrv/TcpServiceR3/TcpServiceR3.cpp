// TcpServiceR3.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include "pch.h"
#include <iostream>
#include <Windows.h>

#pragma comment(lib,"ws2_32.lib")  

unsigned char g_DrvPrivteKey[283] = { 0x52, 0x53, 0x41, 0x32, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xb7, 0x9b, 0x64, 0x4a, 0xad, 0x2c, 0x76, 0xb8, 0x66, 0xc3, 0x35, 0x68, 0xf4, 0xd0, 0x8f, 0xb4, 0x10, 0x44, 0x0f, 0xa3, 0xaf, 0xaf, 0xf6, 0xdf, 0x3c, 0x73, 0x76, 0x44, 0xfa, 0x5d, 0xc6, 0x6f, 0xbc, 0xd8, 0x4e, 0x61, 0xd8, 0x5e, 0x49, 0x7b, 0xc9, 0xa1, 0x5e, 0x75, 0xe3, 0xee, 0x1b, 0x41, 0x7f, 0x56, 0x9a, 0x91, 0xa7, 0x68, 0x69, 0x06, 0x17, 0xad, 0xe7, 0x5e, 0x21, 0x4f, 0xe5, 0x82, 0x86, 0xdc, 0xe5, 0xf4, 0xa3, 0xc3, 0xdd, 0x7e, 0xfa, 0x7f, 0x7a, 0xb3, 0x60, 0xd5, 0x74, 0xfe, 0x27, 0x90, 0xb3, 0xac, 0x16, 0xea, 0x17, 0x95, 0x29, 0xd7, 0xc0, 0x55, 0x7b, 0x2c, 0x3c, 0x10, 0x4d, 0x22, 0x1a, 0xc5, 0xc3, 0x16, 0x57, 0x1e, 0xc2, 0xb1, 0x59, 0xc3, 0x96, 0x7f, 0x26, 0xd2, 0x8f, 0x6c, 0x8e, 0xf9, 0x8c, 0x56, 0xe1, 0x47, 0x3d, 0x8f, 0x18, 0x84, 0xe1, 0xb0, 0x6f, 0x91, 0xf0, 0x7c, 0x91, 0xc6, 0xcc, 0x48, 0x8c, 0x00, 0x3e, 0x0f, 0xf9, 0x5b, 0x69, 0x6b, 0xf2, 0xe8, 0xed, 0xce, 0x5c, 0xb1, 0x86, 0x48, 0x76, 0x5d, 0xe6, 0x74, 0xc2, 0xbb, 0x51, 0x58, 0x54, 0x31, 0x80, 0x15, 0x80, 0xc0, 0xd1, 0x4c, 0xb5, 0x85, 0x19, 0xce, 0xbd, 0x79, 0xfc, 0x2b, 0x2c, 0xb0, 0x5b, 0x4c, 0x3e, 0x49, 0x07, 0x5c, 0x30, 0xee, 0xa8, 0x3a, 0x59, 0xb4, 0x9a, 0x74, 0x28, 0xfb, 0xc3, 0x73, 0x81, 0x1d, 0xcc, 0x0f, 0x69, 0xfc, 0xe6, 0xbf, 0x05, 0x18, 0xad, 0xd4, 0xf8, 0x33, 0x33, 0x69, 0xfe, 0xef, 0x1d, 0xa5, 0xb0, 0x39, 0xca, 0x3c, 0xc1, 0xe0, 0xdd, 0x88, 0xdb, 0x6c, 0x6c, 0xe4, 0x82, 0x1f, 0xa2, 0xf0, 0x84, 0x5e, 0xc8, 0x0c, 0x09, 0xf6, 0xfd, 0xc1, 0x8c, 0xe8, 0x62, 0x24, 0xd7, 0x49, 0xc2, 0xdc, 0xf5, 0x7a, 0x07, 0x41, 0x26, 0x21, 0xf5, 0xe6, 0xfb, 0xe3 };


unsigned char g_ServicePublicKey[155] = { 0x52, 0x53, 0x41, 0x31, 0x00, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xed, 0x4d, 0x88, 0xbe, 0x07, 0x1c, 0xef, 0xa5, 0x5a, 0x0d, 0x97, 0x15, 0x79, 0x48, 0xad, 0x91, 0x0f, 0x2b, 0x68, 0x66, 0xa8, 0xca, 0x4e, 0x71, 0xce, 0x9a, 0x6d, 0x01, 0x6b, 0x12, 0x83, 0xf6, 0x19, 0x49, 0x25, 0xc8, 0x97, 0x3c, 0x41, 0x2d, 0xad, 0x9e, 0xde, 0x6d, 0xe8, 0x6b, 0x06, 0x75, 0x5b, 0x33, 0x39, 0xb6, 0xd0, 0xb7, 0xc7, 0x4a, 0xae, 0xea, 0x26, 0xf0, 0x97, 0x4c, 0xa3, 0x44, 0x43, 0xcc, 0xc0, 0x4e, 0xc5, 0xd3, 0xba, 0x66, 0x1b, 0x2e, 0xe7, 0xce, 0xfe, 0xba, 0x12, 0xc9, 0x1c, 0x42, 0xd2, 0x63, 0xac, 0x05, 0x97, 0x88, 0x35, 0xd4, 0x8f, 0x83, 0x1f, 0x30, 0x5c, 0x5c, 0x37, 0xe2, 0x11, 0x01, 0xbc, 0x8f, 0x83, 0x50, 0xb5, 0xd0, 0x00, 0x5f, 0x4f, 0x98, 0xfe, 0x6c, 0x3f, 0x34, 0x0d, 0x70, 0xe0, 0x99, 0x6d, 0x73, 0x0f, 0xfb, 0x04, 0xf5, 0x0d, 0x4c, 0x51, 0x79 };
typedef struct _DRV_INFO
{
    BOOL bCanLoad;
    char szDrvNum[15];
}DRV_INFO, *PDRV_INFO;

void printHex(const uint8_t *ptr, int len) {
    //printf("%s\ndata[%d]: ", tag, len);
    for (int i = 0; i < len; ++i) {
        printf("%.2X ", *ptr++);
    }
    printf("\n");
}

BOOLEAN CheckDrv(char* buff, DWORD cbBuff)
{
    PVOID pDecrypt = NULL;
    DWORD cbDecrypt = 0;

    if (buff == NULL)
        return false;

    if (!NT_SUCCESS(RSADecrypt(g_DrvPrivteKey, sizeof(g_DrvPrivteKey), (PUCHAR)buff, cbBuff, &pDecrypt, &cbDecrypt)))
    {
        printf("service:Decrypt faild.\n");
        return false;
    }

    printf("cbDecrypt: %d\n", cbDecrypt);
    printf("decrypt:%s\n", (char*)pDecrypt);

    printf("驱动:%s 连接", (char*)pDecrypt);

    if (!_strnicmp((const char*)pDecrypt, "1001", strlen("1001")))
    {
        free(pDecrypt);
        return true;
    }

    free(pDecrypt);
    return false;
}

int main(int argc, char* argv[])
{
    //初始化WSA  
    WORD sockVersion = MAKEWORD(2, 2);
    WSADATA wsaData;
    PVOID pSend = NULL;
    DWORD cbSend = 0;
    NTSTATUS status = STATUS_UNSUCCESSFUL;

    BOOLEAN bCanLoad = FALSE;
    if (WSAStartup(sockVersion, &wsaData) != 0)
    {
        return 0;
    }
    //创建套接字  
    SOCKET slisten = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (slisten == INVALID_SOCKET)
    {
        printf("socket error !");
        return 0;
    }
    //绑定IP和端口  
    sockaddr_in sin;
    sin.sin_family = AF_INET;
    sin.sin_port = htons(10086);
    sin.sin_addr.S_un.S_addr = INADDR_ANY;
    if (bind(slisten, (LPSOCKADDR)&sin, sizeof(sin)) == SOCKET_ERROR)
    {
        printf("bind error !");
    }
    //开始监听  
    if (listen(slisten, 5) == SOCKET_ERROR)
    {
        printf("listen error !");
        return 0;
    }
    //循环接收数据  
    SOCKET sClient;
    sockaddr_in remoteAddr;
    int nAddrlen = sizeof(remoteAddr);
    char revData[1024];

    while (true)
    {
        printf("等待连接...\n");
        sClient = accept(slisten, (SOCKADDR *)&remoteAddr, &nAddrlen);
        if (sClient == INVALID_SOCKET)
        {
            printf("accept error !");
            continue;
        }
        //接收数据  
        int ret = recv(sClient, revData, 1024, 0);
        if (ret > 0)
        {
            revData[ret] = 0x00;

            // 注意 这里 服务器应该要用线程来处理这个连接 这里只是测试 就随便写了
            bCanLoad = CheckDrv(revData, ret);

            //printf("驱动:-%s -%d 连接 - 根据服务器配置:%s\n", revData, ret, bCanLoad ? "可以加载" : "拒绝加载");
            printf("根据服务器配置 : %s\n", bCanLoad ? "可以加载" : "拒绝加载");
        }
        //发送数据  
        const char * sendDataSuccess = "OJBK-Open";  //必须OJBK开头
        const char*  sendDataFaild = "OJBK-Close";

        if (bCanLoad)
        {
            status = RSAEncrypt(g_ServicePublicKey, sizeof(g_ServicePublicKey), (PUCHAR)sendDataSuccess, strlen(sendDataSuccess), &pSend, &cbSend);
        }
        else
        {
            status = RSAEncrypt(g_ServicePublicKey, sizeof(g_ServicePublicKey), (PUCHAR)sendDataFaild, strlen(sendDataFaild), &pSend, &cbSend);
        }

        if (!NT_SUCCESS(status))
        {
            printf("service entry faild.\n");
            send(sClient, "xxoo", 4, 0);
        }
        else
        {
            printf("service send cb : %d\n", cbSend);
            send(sClient, (const char*)pSend, cbSend, 0);
            free(pSend);
            pSend = NULL;
            cbSend = 0;
        }

        /*if(bCanLoad)
            send(sClient, sendDataSuccess, strlen(sendDataSuccess), 0);
        else
            send(sClient, sendDataFaild, strlen(sendDataFaild), 0);*/
    }
    closesocket(sClient);
    closesocket(slisten);
    WSACleanup();
    return 0;
}
